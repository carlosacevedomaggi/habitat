## Plan: Appearance Section Enhancement

**Objective:** Enhance the admin "Appearance" section to provide comprehensive control over the web app's theme colors and improve the home page background image display.

**I. Theme Color Management**

1.  **Backend Setup (`models.py`, `schemas.py`, `seed_data.py`):**
    *   **Identify Key Theme Colors:** Determine all distinct colors used across the application that should be themeable. Examples:
        *   `theme_primary_color` (e.g., for buttons, primary accents)
        *   `theme_secondary_color` (e.g., for secondary elements, hover states)
        *   `theme_accent_color` (e.g., for highlights, special CTAs - already exists as `accent_color`, can rename for consistency)
        *   `theme_text_color_primary` (main text color, e.g., on light backgrounds)
        *   `theme_text_color_secondary` (subtle text, e.g., on light backgrounds)
        *   `theme_text_color_on_dark` (main text on dark backgrounds - already exists as `text_color`)
        *   `theme_background_primary` (main page background - already exists as `background_color`)
        *   `theme_background_secondary` (e.g., cards, content blocks on primary background)
        *   `theme_header_background`
        *   `theme_header_text_color`
        *   `theme_footer_background`
        *   `theme_footer_text_color`
        *   `theme_border_color`
        *   `theme_success_color` (for success messages/toasts)
        *   `theme_error_color` (for error messages/toasts)
        *   `theme_info_color` (for informational messages)
        *   `theme_warning_color` (for warning messages)
    *   **SiteSettings Model (`models.py`):**
        *   Ensure each identified theme color has a corresponding key in `SiteSettings`.
        *   The `value` for these keys should store the color as a hex string (e.g., `{"text": "#RRGGBB"}` or just `"#RRGGBB"` if `SettingsContext` handles the object structure). Plan recommends just `"#RRGGBB"` directly for simplicity if the frontend is adapted.
        *   Set `category` to "ThemeColors" or "AppearanceColors".
    *   **Schemas (`schemas.py`):**
        *   No specific changes needed if `SiteSettings` schema is generic (value: `dict` or `JSON`).
    *   **Seed Data (`seed_data.py`):**
        *   Add default values for all new theme color settings. These should match the current hardcoded or Tailwind default colors to ensure a seamless transition.

2.  **Frontend - Admin Appearance Page (`frontend/pages/admin/appearance.js` or new `theme.js`):**
    *   Create a dedicated "Theme Colors" subsection.
    *   Fetch all settings with category "ThemeColors".
    *   For each color setting:
        *   Display a user-friendly label (e.g., "Primary Color" from "theme_primary_color").
        *   Render an `<input type="color">` for easy color picking.
        *   Display the current hex value (e.g., `#FFFFFF`) next to or below the color picker, making it editable directly as text too.
        *   On change (either from color picker or text input), update the local `settings` state.
    *   Implement a "Save Theme Colors" button.
        *   On click, send the updated color settings (only those in the "ThemeColors" category) to the backend PUT `/api/settings` endpoint.
        *   Provide feedback (success/error toast messages).

3.  **Frontend - Settings Context (`frontend/context/SettingsContext.js`):**
    *   Modify `fetchSettings` to correctly parse all new theme color keys.
    *   In the `useEffect` that applies theme variables:
        *   Iterate through all fetched theme color settings.
        *   For each setting, generate a CSS custom property (e.g., `theme_primary_color` becomes `--theme-primary-color`).
        *   Apply these CSS custom properties to the `:root` element ( `document.documentElement.style.setProperty(...)`).
        *   Ensure fallback values in `getSetting` or directly in the CSS variable assignment point to sensible defaults from `defaultSettings` if a theme color is not yet saved.

4.  **Frontend - CSS & Components:**
    *   **Global Styles (`globals.css` or Tailwind base):**
        *   Define base styles using the new CSS custom properties. For example:
            ```css
            body {
              background-color: var(--theme-background-primary, #f0f0f0);
              color: var(--theme-text-color-primary, #333333);
              font-family: var(--font-primary, sans-serif); /* Existing font theming */
            }
            ```
    *   **Tailwind Configuration (`tailwind.config.js`):**
        *   Option 1 (Recommended for broad usage): Extend Tailwind's color palette to use these CSS variables.
            ```javascript
            // tailwind.config.js
            module.exports = {
              theme: {
                extend: {
                  colors: {
                    'theme-primary': 'var(--theme-primary-color)',
                    'theme-secondary': 'var(--theme-secondary-color)',
                    'theme-accent': 'var(--theme-accent-color)', // Existing accent
                    'theme-text-primary': 'var(--theme-text-color-primary)',
                    // ... and so on for all themeable colors
                  },
                  backgroundColor: theme => ({ // Ensure background colors also use vars
                    ...theme('colors'), // Inherit other colors
                    'theme-bg-primary': 'var(--theme-background-primary)', // Existing bg
                    'theme-bg-secondary': 'var(--theme-background-secondary)',
                    'theme-header': 'var(--theme-header-background)',
                    'theme-footer': 'var(--theme-footer-background)',
                  }),
                  textColor: theme => ({ // Ensure text colors also use vars
                     ...theme('colors'),
                    'theme-text-ondark': 'var(--theme-text-color-on-dark)', // Existing text color
                  }),
                  // ... extend borderColor, etc.
                },
              },
              // ...
            };
            ```
        *   Option 2 (More manual): Components explicitly use `style={{ color: 'var(--theme-primary-color)' }}`. This is less ideal for broad changes.
    *   **Component Review:**
        *   Audit all components (`.js` files in `components` and `pages`).
        *   Replace hardcoded colors and direct Tailwind color classes (e.g., `bg-blue-500`, `text-red-600`) with the new theme-based Tailwind classes (e.g., `bg-theme-primary`, `text-theme-error`) or direct CSS variable usage where appropriate.
        *   Pay special attention to buttons, links, backgrounds, text, borders, and interactive element states (hover, focus).
        *   Ensure toast notifications also adopt theme colors for success, error, etc. `ToastContainer` might need props or global CSS overrides.

**II. Home Page Background Image Enhancement**

1.  **Current State:** The background image is set via `home_background_url` in settings and applied to the `HeroSection` component specifically.
2.  **Goal:** Make the `home_background_url` image cover the entire application's background, not just the hero area, effectively replacing the solid `background_color` when set.

3.  **Implementation Steps:**
    *   **Settings Context (`frontend/context/SettingsContext.js`):**
        *   Fetch `home_background_url` (already part of generic settings fetch if category is known or if all settings are fetched).
        *   In the `useEffect` that applies styles (or a new one):
            *   Check if `home_background_url` is valid.
            *   If valid, apply it to `document.body.style` or `document.documentElement.style`:
                ```javascript
                const homeBgUrl = getSetting('home_background_url'); // Assuming key is 'home_background_url'
                if (homeBgUrl) {
                  document.body.style.backgroundImage = `url(${homeBgUrl})`;
                  document.body.style.backgroundSize = 'cover';
                  document.body.style.backgroundPosition = 'center center';
                  document.body.style.backgroundAttachment = 'fixed'; // Optional: for parallax effect
                  // Potentially set a very dark semi-transparent overlay if text contrast is an issue directly on body
                  // document.body.style.setProperty('--body-bg-overlay', 'linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5))');
                  // Then this overlay would need to be applied with ::before or ::after on body or main layout div.
                } else {
                  // Fallback to theme_background_primary if no image URL
                  document.body.style.backgroundImage = 'none'; // Clear any previous image
                  document.body.style.backgroundColor = getSetting('theme_background_primary', defaultSettings.background_color);
                }
                ```
            *   If `home_background_url` is not set or invalid, ensure `document.body.style.backgroundImage` is `none` and the `theme_background_primary` (from color theming) is applied as `backgroundColor`.
    *   **Layout Component (`frontend/components/Layout.js`):**
        *   The main layout `div` (e.g., `<div className="flex flex-col min-h-screen ...">`) might need adjustments. If the `body` has the background image, this `div` should likely have a transparent background or a semi-transparent `theme_background_primary` to allow the body's image to show through while still providing a content area background.
        *   Example: `style={{ backgroundColor: 'var(--theme-content-background, rgba(var(--theme-background-primary-rgb), 0.8))' }}`.
    *   **Hero Section (`frontend/components/HeroSection.js`):**
        *   Remove its specific `style={{ backgroundImage: ... }}`.
        *   The hero content (text, buttons) will now render on top of the global background image.
        *   Ensure the hero's overlay (`<div className="absolute inset-0 bg-black/40" />`) still provides sufficient contrast for its text against potentially varied background images. This overlay might need to be themed (e.g., `var(--theme-hero-overlay-color)`).
    *   **Content Sections:**
        *   Other content sections (e.g., on the homepage or other pages) should use `background-color: var(--theme-background-secondary)` or `var(--theme-content-block-bg)` to ensure readability over the global background image. These content blocks act as "cards" or "panels" on top of the global background.

**III. Admin Control for Background Image**

*   The admin page `frontend/pages/admin/appearance.js` already allows uploading and setting `home_background_url`. This functionality can remain as is.
*   Consider adding a "Remove Background Image" button that clears the `home_background_url` setting, reverting to the solid `theme_background_primary`.

**Testing Considerations:**
*   Test with various colors to ensure readability and aesthetic consistency.
*   Test with different background images (light, dark, busy, simple) to verify content remains legible.
*   Check all pages for correct color application and background display.
*   Verify responsiveness. 